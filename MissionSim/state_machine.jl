

# Should albedo be in system/params or something?
temp_count = 0
final_count = 0 

# Should we prevent it from getting stuck in "detumble" endlessly?

println("Using s·¥Æ truth")
function update_operation_mode(flags::FLAGS, sens::SENSORS, system, albedo, current_data, t, satellite_estimate, s·¥Æ_truth)
    #flags:= {in_sun, magnetometer_calibrated, diodes_calibrated, calibrating, detumbling}
    # Don't like data_structure names for estimators, or order of DIODE_CALIB

    sÃÇ·¥µ = sun_position(t) - sens.gps     # Estimated sun vector 
    BÃÇ·¥µ = IGRF13(sens.gps, t)            # Estimated magnetic field vector
    ùê¨ÃÇ·¥Æ = estimate_sun_vector(sens, satellite_estimate)
    B·¥Æ = sens.magnetometer      # SHOULD BE A tilde

    if flags.magnetometer_calibrated
        B·¥Æ = correct_mag_field(satellite_estimate, B·¥Æ)  # Should be a hat?
        # return finished, TRIVIAL(1.0), TRIVIAL(1.0), flags
    end

    if flags.diodes_calibrated && flags.magnetometer_calibrated
        global final_count += 1
        if final_count > 5000
            return finished, TRIVIAL(1.0), TRIVIAL(1.0), flags
        end
    end




    ###########################################
    ###### FINISH CURRENT TASK FIRST ##########
    ###########################################

    if flags.detumbling 
        if flags.diodes_calibrated
            temp = deepcopy(sens)
            temp.gyro = temp.gyro - satellite_estimate.state[5:7] # current_data.sat_state[5:7]
            flags.detumbling = !check_if_finished(sens, 10)  # detumbler - 5 ¬∞/sec, is detumbling if *not* finished
        else
            flags.detumbling = !check_if_finished(sens, 25) # detumbler - 
        end
        
        if flags.detumbling  # Still detumbling, continue
            mode, cont, est = detumble,  DETUMBLER(sens.gyro, B·¥Æ, system._dt), TRIVIAL(0.0)
            return mode, cont, est, flags
        end

    elseif flags.calibrating
        if !flags.magnetometer_calibrated # Calibrating MAGNETOMETER
            if check_if_finished(satellite_estimate) 
                flags.calibrating, flags.magnetometer_calibrated = false, true 
                B·¥Æ = correct_mag_field(satellite_estimate, sens.magnetometer)  # If it is now calibrated, correct B·¥Æ 
                # return finished, TRIVIAL(1.0), TRIVIAL(1.0), flags 
            end       
        else #if !flags.diodes_calibrated # Calibrating DIODES   
            # DONT LIKE THIS METHOD FOR CHECKING FINISHED!
            if sum(abs.(sens.diodes)) > eclipse_threshold # If still in sun
                temp = 0
                if check_if_finished(current_data, satellite_estimate) # diodes -> Do we need to enforce one sunlight-orbit...?
                    flags.calibrating, flags.diodes_calibrated = false, true
                end
            else
                flags.in_sun = false 
                flags.calibrating = false
            end
        # else
        #     tttt = 5
        end

        if flags.calibrating  # If still not done calibrating...
            if !flags.magnetometer_calibrated # Continue calibrating magnetometer
                mode, cont, est = mag_cal, TRIVIAL(0.0), MAG_CALIB(B·¥Æ, BÃÇ·¥µ)
            
            else #if !flags.diodes_calibrated # Continue calibrating diodes
                mode, cont = diode_cal, TRIVIAL(0.0)

                est = DIODE_CALIB(albedo,                       # Albedo
                                    current_data.sat_state,     # Satellite State
                                    # current_data.covariance,    # Filter Covariance 
                                    [sÃÇ·¥µ BÃÇ·¥µ]',                   # Vectors in Inertial Frame
                                    sens.gyro,                  # Angular Velocity, œâ
                                    [ùê¨ÃÇ·¥Æ B·¥Æ]',                   # Vectors in Body Frame
                                    sens.diodes,                # Current Measurements, IÃÉ
                                    current_data.W,             # 
                                    current_data.V,             #
                                    system._dt,                 # Time step, dt
                                    current_data.time,          #
                                    length(sens.diodes),        # Number of photodiodes
                                    sens.gps,                   # Position 
                                    false)                      # First pass 
            end
            return mode, cont, est, flags, satellite_estimate
        end
    end


    ###########################################
    ###### SELECT NEXT TASK IF NEEDED #########
    ###########################################
    
    if flags.diodes_calibrated
        œâ = sens.gyro - satellite_estimate.state[5:7] 
    else
        œâ = sens.gyro
    end    

    s·¥µ_unscaled = sun_position(t) - sens.gps;
    ecl = eclipse_conical(-sens.gps, s·¥µ_unscaled)


    if ((flags.diodes_calibrated) && (norm(œâ) > deg2rad(15.0))) || ((!flags.diodes_calibrated) && (norm(œâ) > deg2rad(30.0)))
        mode = detumble
        cont = DETUMBLER(sens.gyro, B·¥Æ, system._dt)  
        est = TRIVIAL(0.0)
        flags.detumbling = true


    elseif !flags.magnetometer_calibrated 
        mode = mag_cal
        cont = TRIVIAL(0.0)
        est = MAG_CALIB(B·¥Æ, BÃÇ·¥µ)
        flags.calibrating = true

    elseif (norm(ùê¨ÃÇ·¥Æ) > eclipse_threshold) # in sun -> Make consistent across everything!

        if (ecl < 0.9)
            println("ERROR!: ecl: $ecl but s = ", norm(ùê¨ÃÇ·¥Æ), " at time $t")
            # @infiltrate
        end
        flags.in_sun = true 
        if !flags.diodes_calibrated
            ### CALIBRATE DIODES
            q, R = triad(sÃÇ·¥µ, BÃÇ·¥µ, ùê¨ÃÇ·¥Æ, B·¥Æ) # Normalizes all input Vectors
            mode = diode_cal 
            cont = TRIVIAL(0.0)

            println("Making new diode: ")
            est = new_diode_calib(albedo, sens, system, q, satellite_estimate) # Init DIODE_CALIB
            est.inertial_vecs = [sÃÇ·¥µ BÃÇ·¥µ]'
            est.body_vecs = [ùê¨ÃÇ·¥Æ B·¥Æ]'
            est.current_meas = sens.diodes

            if norm(ùê¨ÃÇ·¥Æ) < 0.01
                println("Somehow still not actually in sun...")
                @infiltrate
            end

            flags.calibrating = true
            global temp_count = 0 # Ensures that everytime you enter into sun you give yourself a second to calm before finishing
        else 
            mode = mekf 
            q, R = triad(sÃÇ·¥µ, BÃÇ·¥µ, ùê¨ÃÇ·¥Æ, B·¥Æ)
            if isa(current_data, DIODE_CALIB) # Finished diode cal during sunlit cycle 
                # est = new_mekf(current_data)  
                est = new_mekf(albedo, sens, system, q, satellite_estimate)
            elseif isa(current_data, MEKF)
                est = current_data
            else    # Starting out of an eclipse 
                est = new_mekf(albedo, sens, system, q, satellite_estimate)
            end

            # est = new_diode_calib(albedo, sens, system, q, satellite_estimate)
            est.inertial_vecs = [sÃÇ·¥µ BÃÇ·¥µ]'
            est.body_vecs = [ùê¨ÃÇ·¥Æ B·¥Æ]'
            est.current_meas = sens.diodes
            est.pos = sens.gps
            est.ang_vel = sens.gyro


            cont = TRIVIAL(0.0)
            flags.calibrating = false
        end

    # elseif ((flags.diodes_calibrated) && (norm(œâ) > deg2rad(10.0))) || ((!flags.diodes_calibrated) && (norm(œâ) > deg2rad(20.0)))
    #     mode = detumble
    #     cont = DETUMBLER(sens.gyro, B·¥Æ, system._dt)  
    #     est = TRIVIAL(0.0)
    #     flags.detumbling = true
    else# Need to ensure diode calibration and MEKF (Œ≤) are used as initial conditions for the next loop
        flags.in_sun = false 
        mode = chill
        cont = TRIVIAL(0.0)
        est = TRIVIAL(0.0)
        flags.calibrating = false
    end

    return mode, cont, est, flags, satellite_estimate
end



# HELPER  Functions
function estimate_sun_vector(sens::SENSORS, sat_est::SATELLITE)
    if norm(sens.diodes) > eclipse_threshold  # If not eclipsed
        x‚ÇÅ = (sens.diodes[1]/sat_est.diodes.calib_values[1])
        x‚ÇÇ = (sens.diodes[2]/sat_est.diodes.calib_values[2])
        y‚ÇÅ = (sens.diodes[3]/sat_est.diodes.calib_values[3])
        y‚ÇÇ = (sens.diodes[4]/sat_est.diodes.calib_values[4])
        z‚ÇÅ = (sens.diodes[5]/sat_est.diodes.calib_values[5])
        z‚ÇÇ = (sens.diodes[6]/sat_est.diodes.calib_values[6])

        # sun_vec_est = [x‚ÇÅ - x‚ÇÇ;
        #                 y‚ÇÅ - y‚ÇÇ;
        #                 z‚ÇÅ - z‚ÇÇ]
        # sun_vec_est = [ (sens.diodes[1]/sat_est.diodes.calib_values[1]) - (sens.diodes[2]/sat_est.diodes.calib_values[2]);
        #                 (sens.diodes[3]/sat_est.diodes.calib_values[3]) - (sens.diodes[4]/sat_est.diodes.calib_values[4]);
        #                 (sens.diodes[5]/sat_est.diodes.calib_values[5]) - (sens.diodes[6]/sat_est.diodes.calib_values[6])]


        sun_vec_est = [(x‚ÇÅ*cos(-pi/4) + z‚ÇÅ*cos(pi/4) + x‚ÇÇ*cos(3*pi/4) + z‚ÇÇ*cos(-3*pi/4));    #(z‚ÇÅ*cos(pi/4) + x‚ÇÇ*cos(3*pi/4) + z‚ÇÇ*cos(5*pi/4) + x‚ÇÅ*cos(7*pi/4))
                        y‚ÇÅ - y‚ÇÇ;
                       (x‚ÇÅ*cos(3*pi/4) + z‚ÇÅ*cos(pi/4) + x‚ÇÇ*cos(-pi/4) + z‚ÇÇ*cos(-3*pi/4))] # -(x‚ÇÅ*cos(pi/4) + z‚ÇÅ*cos(3*pi/4) + x‚ÇÇ*cos(5*pi/4) + z‚ÇÇ*cos(7*pi/4))]    

        sun_vec_est /= norm(sun_vec_est)
    else
        # Assume that we are in eclipse
        sun_vec_est = [0; 0; 0]
    end
        
    return sun_vec_est # Unit - sÃÇ·¥Æ
end


function correct_mag_field(sat, BÃÉ·¥Æ)
    """ Uses magnetometer calibration stuff to fix B·¥Æ using sat ESTIMATE! """
    # Generate T, Bias from sat 
    a, b, c = sat.magnetometer.scale_factors 
    œÅ, Œª, œï = sat.magnetometer.non_ortho_angles 
    Œ≤ = sat.magnetometer.bias

    TÃÇ = [a          0               0;
         b*sin(œÅ)   b*cos(œÅ)        0; 
         c*sin(Œª)   c*sin(œï)*cos(Œª) c*cos(œï)*cos(Œª)  ]

    BÃÇ·¥Æ = TÃÇ^(-1) * (BÃÉ·¥Æ - Œ≤)

    return BÃÇ·¥Æ # Corrected mag field in body frame -> not unit
end

function triad(r‚ÇÅ·¥µ,r‚ÇÇ·¥µ,r‚ÇÅ·¥Æ,r‚ÇÇ·¥Æ)
    """
        (Summary)

        Arguments:
            - 

        Returns:
            -
    """
    # Method for estimating the rotation matrix between two reference frames 
    #   Relies only on a single pair of vectors in each frame
    # Inputs: 
    #   - r‚ÇÅ·¥µ, r‚ÇÇ·¥µ: Pair of vectors in the Newtonian (inertial) frame     | [3,]
    #   - r‚ÇÅ·¥Æ, r‚ÇÇ·¥Æ: Corresponding pair of vectors in body frame           | [3,]    
    # Outputs:
    #   - R: A directed cosine matrix (DCM) representing the rotation     | [3 x 3]
    #           between the two frames 
    #   - q: A quaternion (scalar last) representing the rotation         | [4,]
    #           between the two frames

    ùê´‚ÇÅ·¥µ = r‚ÇÅ·¥µ / norm(r‚ÇÅ·¥µ)
    ùê´‚ÇÇ·¥µ = r‚ÇÇ·¥µ / norm(r‚ÇÇ·¥µ)
    ùê´‚ÇÅ·¥Æ = r‚ÇÅ·¥Æ / norm(r‚ÇÅ·¥Æ)
    ùê´‚ÇÇ·¥Æ = r‚ÇÇ·¥Æ / norm(r‚ÇÇ·¥Æ)

    t‚ÇÅ·¥µ = ùê´‚ÇÅ·¥µ
    t‚ÇÇ·¥µ = cross(ùê´‚ÇÅ·¥µ, ùê´‚ÇÇ·¥µ)/norm(cross(ùê´‚ÇÅ·¥µ,ùê´‚ÇÇ·¥µ));
    t‚ÇÉ·¥µ = cross(t‚ÇÅ·¥µ, t‚ÇÇ·¥µ)/norm(cross(t‚ÇÅ·¥µ,t‚ÇÇ·¥µ));

    T·¥µ = [t‚ÇÅ·¥µ[:] t‚ÇÇ·¥µ[:] t‚ÇÉ·¥µ[:]]

    t‚ÇÅ·¥Æ = ùê´‚ÇÅ·¥Æ
    t‚ÇÇ·¥Æ = cross(ùê´‚ÇÅ·¥Æ, ùê´‚ÇÇ·¥Æ)/norm(cross(ùê´‚ÇÅ·¥Æ,ùê´‚ÇÇ·¥Æ));
    t‚ÇÉ·¥Æ = cross(t‚ÇÅ·¥Æ, t‚ÇÇ·¥Æ)/norm(cross(t‚ÇÅ·¥Æ,t‚ÇÇ·¥Æ));

    T·¥Æ = [t‚ÇÅ·¥Æ[:] t‚ÇÇ·¥Æ[:] t‚ÇÉ·¥Æ[:]]

    R = T·¥µ * (T·¥Æ')

    q = q_from_DCM(R);

    return q, R
end


# For detumbler (combine with photodiode method...?)
function check_if_finished(sens::SENSORS, thresh)
    return (norm(sens.gyro) < deg2rad(thresh))
end

# For magnetometer 
function check_if_finished(sat_est::SATELLITE)
    if !check_if_run()
        return false
    end

    œÅ_est, Œª_est, œï_est = sat_est.magnetometer.non_ortho_angles 
    if (abs(œÅ_est) > pi/3) || (abs(Œª_est) > pi/3) || (abs(œï_est) > pi/3)
        println("Error with major non-ortho angles!")
        return false
    else
        println("Finished MAGNETOMETER")
        return true
    end
end

# For photodiodes ( combine with detumbler)
function check_if_finished(data::DIODE_CALIB, sat_est::SATELLITE)
    return (norm(sat_est.covariance) < 0.0065) #7)
end