module Simulator

using ..CustomStructs
using LinearAlgebra, SatelliteDynamics, EarthAlbedo

using Infiltrator

include("simulator_config_file.jl")
include("../rotationFunctions.jl")
include("../mag_field.jl")

# Primary functions
export rk4
export generate_measurements

# Simulator options:
export SIM


####################################################################
#                         SOFTWARE                                 #
####################################################################

struct SIM # For now, just used for multiple dispatch 
    junk
end

# Bias...? 
function dynamics(sat::SATELLITE, x, u, t)
    """ Propagates state dynamics.  Called in _____. Assumes t includes epoch already """

    if norm(x[1:3]) < 6378136.3 # Satellite has crashed!
        error("Impact at time $t")
    end

    rÃá = x[4:6]
    vÃá = accel_perturbations(t, x[1:6]);

    w = x[11:13] # angular velocity 
    qÃá = 0.5 * qmult(x[7:10], [w; 0]) # Scalar LAST quaternion

    J = sat.J
    wÃá = (J^(-1)) * (u - cross(w, (J*w)))
    # wÃá = J \ (u - cross(w, J*w))

    œÉŒ≤ = deg2rad(0.05)  #0.22
    Œ¥Œ≤ = œÉŒ≤ * randn(3)  #Œ≤Ãá  looks funny so I am using Œ¥

    return [rÃá[:]; vÃá[:]; qÃá[:]; wÃá[:]; Œ¥Œ≤[:]]
end

    function accel_perturbations(epc::Epoch, x::Array{<:Real} ;
        mass::Real=1.0, area_drag::Real=0.01, coef_drag::Real=2.3,
        area_srp::Real=1.0, coef_srp::Real=1.8,
        n_grav::Integer=10, m_grav::Integer=10)
        """Accelerations for spacecraft in LEO, ForwardDiff friendly"""

        # Extract position and velocity
        r = x[1:3]
        v = x[4:6]

        # Compute ECI to ECEF Transformation -> IAU2010 Theory
        PN = bias_precession_nutation(epc)
        E  = earth_rotation(epc)
        W  = polar_motion(epc)
        R  = W * E * PN

        # Compute sun and moon position
        r_sun  = sun_position(epc)
        r_moon = moon_position(epc)

        # Compute acceleration (eltype(x) makes this forward diff friendly)
        a = zeros(eltype(x), 3)

        # spherical harmonic gravity
        a += accel_gravity(x, R, n_grav, m_grav)

        # atmospheric drag
        œÅ = density_harris_priester(epc,r)
        a += accel_drag([r;v],œÅ,mass, area_drag, coef_drag, Array{Real, 2}(PN))

        # SRP
        nu = eclipse_conical(x, r_sun)
        a += nu*accel_srp(x, r_sun, mass, area_srp, coef_srp)

        # third body sun
        a += accel_thirdbody_sun(x, r_sun)

        # third body moon
        a += accel_thirdbody_moon(x, r_moon)

        return a
    end

    # NOT a standard rk4
    function rk4(model,x_n,u,t_n,h)
        """ 
            Modified rk4 function (from Kevin)
        """

        k1 = h * dynamics(model, x_n, u, t_n)
        k2 = h * dynamics(model, x_n + k1/2, u, t_n + h/2)
        k3 = h * dynamics(model, x_n + k2/2, u, t_n + h/2)
        k4 = h * dynamics(model, x_n + k3, u, t_n + h)

        return (x_n + (1/6)*(k1+2*k2+2*k3 + k4))
    end


        
# Still relies on old faulty eclipse, noise not all in 
# No vectors are normed... yet?
function generate_measurements(sim::SIM, sat::SATELLITE, alb::ALBEDO, x, t, CONSTANTS, dt)
    """ Generates sensor measurements. sat_truth, Called in _____"""
    pos = x[1:3]
    q‚Éó = x[7:9]; q‚ÇÄ = x[10] # Vector, Scalar portions

    # ·¥∫R·¥Æ = I(3) + 2 * hat(q‚Éó) * (q‚ÇÄ * I(3) + hat(q‚Éó)); # Equation from Kevin, quaternion -> DCM (eq 39)
    # ·¥ÆR·¥∫ = transpose(·¥∫R·¥Æ) # N -> B  SAME AS NEXT LINE
    ·¥ÆR·¥∫ = dcm_from_q(x[7:10])'

    s·¥µ = sun_position(t)  # Sun-Earth vector
    ecl = eclipse_conical(-pos, s·¥µ)
    if (ecl == 0.0)
        # println("Eclipsed!")
    end
    s·¥µ = s·¥µ - pos         # Sun-Sat vector

    albedo_matrix, junk = albedo(pos, s·¥µ, alb.refl)

    s·¥µ = ecl * (s·¥µ) # / norm(s·¥µ))

    B·¥µ = IGRF13(pos, t)

    Œ∑_sun = I(3) #generate_noise_matrix(deg2rad(5.0), dt)
    Œ∑_mag = I(3) #generate_noise_matrix(deg2rad(5.0), dt)

    s·¥Æ = Œ∑_sun * (·¥ÆR·¥∫ * (s·¥µ))# / norm(s·¥µ))) # (noisy) Sun vector in body frame
    B·¥Æ = Œ∑_mag * (·¥ÆR·¥∫ * (B·¥µ))# / norm(B·¥µ))) # (noisy) Mag vector in body frame

    ùê¨·¥Æ = Œ∑_sun * (·¥ÆR·¥∫ * (s·¥µ / norm(s·¥µ)))    # unit
    ùêÅ·¥Æ = Œ∑_mag * (·¥ÆR·¥∫ * (B·¥µ / norm(B·¥µ)))   # unit

    num_diodes =  size(sat.diodes.calib_values, 1)
    current_vals = zeros(num_diodes) # Currents being generated by each photodiode

    œµ = sat.diodes.elev_angles 
    Œ± = sat.diodes.azi_angles
    C = sat.diodes.calib_values
    for i = 1:num_diodes 
        surface_normal = [(cos(œµ[i])*cos(Œ±[i])) (cos(œµ[i])*sin(Œ±[i])) sin(œµ[i])]   # Photodiode surface normal 
        diode_albedo = compute_diode_albedo(albedo_matrix, alb.cell_centers_ecef, surface_normal, pos)

        ##### ADD IN NOISE
        current = (C[i] * surface_normal * ùê¨·¥Æ) .+ (C[i] * diode_albedo / CONSTANTS._E_am0) # .+ œÉ_Œ∑_cur * randn() # Calculate current, including noise and Earth's albedo 

        current_vals[i] = current[1] * ecl 
    end

    current_vals[current_vals .< 0] .= 0 # Photodiodes don't generate negative current

    mag_calib_matrix = generate_mag_calib_matrix(sat)

    B·¥Æ = (mag_calib_matrix * B·¥Æ) + sat.magnetometer.bias # IN BODY FRAME!

    wÃÉ = x[11:13] + x[14:16] # + Œ∑
    pos = x[1:3]
    sensors = SENSORS(B·¥Æ, current_vals, wÃÉ, pos)
    truth = GROUND_TRUTH(t, B·¥µ, s·¥µ, ùê¨·¥Æ)

    return truth, sensors 
end


    function generate_noise_matrix(œÉ, dt)
        """
            Generates a [3 x 3] noise rotation matrix given a standard deviation 
                First generates a noise vector and then converts that into a rotation matrix
                (Note that if the standard deviation provided is 0, the identity matrix is returned)
        """
        if œÉ != 0.0
            Œ∑_vec = œÉ * randn(3) # Generate a vector 
            skew = hat(Œ∑_vec)
            norm_Œ∑ = norm(Œ∑_vec)
    
            R = (I(3) + (skew/norm_Œ∑)*sin(norm_Œ∑*dt) + ((skew/norm_Œ∑)^2)*(1 - cos(norm_Œ∑*dt))); # Rodrigues for matrix exponential (?)
        else
            R = I(3)
        end
        
        R = I(3)
        return R
    end

    # ALSO exists in ESTIMATOR...
    function compute_diode_albedo(albedo_matrix, cell_centers_ecef, surface_normal, sat_pos)
        """ 
            Estimates the effect of Earth's albedo on a specific photodiode (by using the surface normal of that diode)
                = cell_albedo * surface_normal^T * r_g, with r_g as a unit vector in the direction of the grid point on Earth
    
            Arguments:
            - albedo_matrix: Albedo values for each cell on the Earth's surface         | [num_lat x num_lon] 
            - surface_normal: Photodiode surface normal                                 | [3,]
            - sat_pos: Cartesian position of satellite                                  | [3,]
    
            Returns:
            - diode_albedo: Total effect of albedo on specified photodiode              | Scalar
        """    
        cell_albedos = zeros(size(albedo_matrix))
    
        rows, cols = size(albedo_matrix)
        diode_albedo = 0.0
        for r = 1:1:rows
            for c = 1:1:cols
                if albedo_matrix[r,c] != 0
                    r_g = cell_centers_ecef[r,c,:] - sat_pos # Distance from satellite to cell center
                    r_g = r_g / norm(r_g)  # Make unit
    
                    cell_albedo = (albedo_matrix[r,c] * (surface_normal * r_g))[1]
    
                    if cell_albedo > 0.0    # Can't be negative
                        diode_albedo = diode_albedo + cell_albedo 
                    end
                end
            end
        end
        
        return diode_albedo
    end

    function generate_mag_calib_matrix(sat::SATELLITE)
        a, b, c = sat.magnetometer.scale_factors
        œÅ, Œª, œï = sat.magnetometer.non_ortho_angles

        T = [a        0.0              0.0;
            b*sin(œÅ)  b*cos(œÅ)         0.0;
            c*sin(Œª)  c*sin(œï)*cos(Œª)  c*cos(œï)*cos(Œª)]

        return T
    end


####################################################################
#                         HARDWARE                                 #
####################################################################
    # function propagate_dynamics()
    # end

    # function generate_measurements()
    # end


end