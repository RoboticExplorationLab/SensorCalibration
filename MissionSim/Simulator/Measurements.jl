""" Masurements.jl:

    Contains all relevant functions to generate state measurements, including the
        simulation of noise for sensors.

    TODO:
    - (When eclipse_conical is updated) Adjust -pos to pos
    - Adjust noise to not include Œ∑_sun/_mag? Or do include them as vectors?
    - Once EarthAlbedo is updated, use its get_diode_albedo
    (Speed up diode/Earth Albedo stuff)

"""

# Update noise
function generate_measurements(sat::SATELLITE, alb::ALBEDO, x, t, CONSTANTS, dt)
    """ 
        Generates sensor measurements, including noise.

        Arguments:
        - sat: TRUE satellite data, which is used to generate sensor measurements       | SATELLITE
                    J (inertia matrix, [3 x 3])          //  magnetometer (calibration values, [3,]),
                    diodes (photodiode parameters [3,])  //  state (attitude and bias, [7,])
        - alb: Albedo struct containing REFL data and cell centers                      | ALBEDO
                    REFL    //   cell_centers_ecef
        - x: Environmental state (pos, vel, att, ang vel, bias)                         | [16,]
        - t: Current time, as an epoch                                                  | Epoch
        - CONSTANTS: Various constants needed (Earth radius, Œº , E_am‚ÇÄ)                 | [3,]       
        - dt: Time step                                                                 | Scalar
        
        Returns:
        - truth: TRUTH struct containing true values for current time and vectors in body/inertial frame    | TRUTH
        - sensors: SENSORS struct containing noisy values for each satellite sensor being simulated         | SENSOR
        - ecl: Scale factor used to track how much the satellite is eclipsed by the Earth (‚àà [0, 1])        | Scalar
        - noise: NOISE struct containing the amount of noise added to the sensors                           | NOISE
    """  
    ·¥ÆR·¥µ = dcm_from_q(view(x, 7:10))'  

    # B·¥µ, B·¥Æ, BÃÉ·¥Æ = generate_magnetic_field(view(x, 1:3), t, sat, ·¥ÆR·¥µ, dt)
    B·¥µ, B·¥Æ, BÃÉ·¥Æ = generate_magnetic_field(view(x, 1:3), t, sat, ·¥ÆR·¥µ, dt, view(x, 17:19))
    w, wÃÉ, Œ∑œâ   = generate_gyro_measurement(x) 
    r, rÃÉ, Œ∑r   = generate_gps_measurement( x) 
    s·¥µ, ùê¨·¥Æ, ecl = update_sun_vectors(view(x, 1:3), t, ·¥ÆR·¥µ, dt)

    I, IÃÉ, Œ∑I = generate_diode_currents(sat, view(x, 1:3), alb, s·¥µ, ùê¨·¥Æ, ecl, CONSTANTS)

    sensors = SENSORS(BÃÉ·¥Æ, IÃÉ, wÃÉ, rÃÉ)
    truth = GROUND_TRUTH(t, B·¥µ, s·¥µ, ùê¨·¥Æ, B·¥Æ)
    junk_noise = zeros(3,3)
    noise = NOISE(Œ∑I, Œ∑œâ, Œ∑r, junk_noise, junk_noise)

    return truth, sensors, ecl, noise
end

function generate_magnetic_field(pos, t, sat, ·¥ÆR·¥µ, dt, mag_bias)
 # function generate_magnetic_field(pos, t, sat, ·¥ÆR·¥µ, dt)
    """
        Generates the true magnetic field vector in inertial and body frames, 
            as well as the noisy sensor measurement.

        Arguments:
        - pos: Current (x, y, z) position of the satellite in ECEF                                          | [3,]
        - t: Current time, as an epoch                                                                      | Epoch
        - sat: TRUE satellite data, which is used to generate sensor measurements                           | SATELLITE
                    J (inertia matrix, [3 x 3])          //  magnetometer (calibration values, [3,]),
                    diodes (photodiode parameters [3,])  //  state (attitude and bias, [7,])
        - ·¥ÆR·¥µ: Rotation matrix from inertial frame to body frame                                            | [3 √ó 3]
        - dt: Time step                                                                                     | Scalar
        
        Returns:
        - B·¥µ: Magnetic field vector in inertial frame (noiseless)                                           | [3,]
        - B·¥Æ: Magnetic field vector in body frame (noiseless)                                               | [3,]
        - BÃÉ·¥Æ: Measured magnetic field vector in body frame (noisy, biased, and scaled)                      | [3,]
    """

    B·¥µ = IGRF13(pos, t)     # Mag vector in inertial frame
    Œ∑_mag = generate_noise_matrix(œÉ_mag, dt)
    B·¥Æ = (·¥ÆR·¥µ * (B·¥µ))       # Mag vector in body frame

    mag_calib_matrix = generate_mag_calib_matrix(sat)
    # BÃÉ·¥Æ = (mag_calib_matrix * Œ∑_mag * B·¥Æ) + sat.magnetometer.bias   # Measured mag vector in body frame
    BÃÉ·¥Æ = (mag_calib_matrix * Œ∑_mag * B·¥Æ) + mag_bias

    return B·¥µ, B·¥Æ, BÃÉ·¥Æ
end

function generate_gyro_measurement(state)
    """ 
        Generates the gyroscope measurement by adding noise into the true values.

        Arguments: 
        - state: Environmental state (pos, vel, att, ang vel, bias)                          | [16,]
        
        Returns:
        - w: Angular velocity                                                            | [3,]
            (NOTE that this is just returned for convenience, as it is already in state)
        - wÃÉ: Measured angular velocity (including noise and bias)                        | [3,]
        - Œ∑w: Gyroscope noise                                                            | [3,]
            (Note that this is really just tracked for debugging purposes)
    """
    w = @view state[11:13] 
    Œ≤ = @view state[14:16]
    Œ∑w = rand(Normal(Œº_gyro_scale * norm(w), œÉ_gyro_scale * norm(w)), 3)  # Noise scales with actual value
    
    wÃÉ = w .+ Œ≤ .+ Œ∑w 

    return w, wÃÉ, Œ∑w
end

function generate_gps_measurement(state)
    """ 
        Generates the GPS measurement by adding noise into the true values.

        Arguments: 
        - state: Environmental state (pos, vel, att, ang vel, bias)                          | [16,]
        
        Returns:
        - r: Global position                                                             | [3,]
            (NOTE that this is just returned for convenience, as it is already in state)
        - rÃÉ: Measured position (including noise)                                         | [3,]
        - Œ∑r: Position noise                                                             | [3,]
            (Note that this is really just tracked for debugging purposes)
    """
    r = @view state[1:3]
    Œ∑r = rand(Normal(Œº_gps, œÉ_gps), 3)
    rÃÉ = r + Œ∑r
    
    return r, rÃÉ, Œ∑r
end

# (Correct eclipse_conical)
function update_sun_vectors(pos, t, ·¥ÆR·¥µ, dt)
    """
        Generates the sun vector in the body and inertial frames, as well as whether or not the 
            sun is being eclipsed by the Earth (from the satellites perspective).
            
        Arguments:
        - pos: [x, y, z] position of the satellite in ECEF frame                                     | [3,]
        - t: Current time, as an epoch                                                               | Epoch
        - ·¥ÆR·¥µ: Rotation matrix from inertial frame to body frame                                     | [3 √ó 3]
        - dt: Time step                                                                              | Scalar
                                      
        Returns:
        - s·¥µ: Satellite-sun vector in the inertial frame                                             | [3,]
        - ùê¨·¥Æ: Unit satellite-sun vector in the body frame                                            | [3,]
        - ecl: Eclipse factor                                                                        | Scalar
        
    """
    s·¥µ‚Çë = sun_position(t) 
    s·¥µ = s·¥µ‚Çë - pos 

    ecl = eclipse_conical(-pos, s·¥µ‚Çë)
    s·¥µ *= ecl 

    Œ∑_sun = generate_noise_matrix(œÉ_sun, dt)   #I(3)
    ùê¨·¥Æ = ecl > 0.01 ? (Œ∑_sun * (·¥ÆR·¥µ * (s·¥µ / norm(s·¥µ)))) :  SVector(0.0, 0.0, 0.0)  # Avoid the divide-by-zero problem

    return s·¥µ, ùê¨·¥Æ, ecl
end

function generate_diode_currents(sat, pos, alb, s·¥µ, ùê¨·¥Æ, ecl, CONSTANTS)
    """ 
        Generates photodiode currents and current measurements. 
            (NOTE that current generated cannot be negative so these are clipped at zero)

        Arguments:
        - sat: TRUE satellite data, which is used to generate sensor measurements                       | SATELLITE
                    J (inertia matrix, [3 x 3])          //  magnetometer (calibration values, [3,]),
                    diodes (photodiode parameters [3,])  //  state (attitude and bias, [7,])
        - pos: Current (x, y, z) position of the satellite in ECEF                                      | [3,]
        - alb: Albedo struct containing REFL data and cell centers                                      | ALBEDO
                    REFL    //   cell_centers_ecef
        s·¥µ: Satellite-Sun vector in the inertial frame (noiseless)                                      | [3,]
        ùê¨·¥Æ: Unit satellite-sun vector in the body frame (noiseless)                                     | [3,]
        - CONSTANTS: Various constants needed (Earth radius, Œº , E_am‚ÇÄ)                                 | [3,]       
        
        Returns:
        - current_vals: Currents generated by each photodiode                                           | [num_diodes,]
        - current_meas: Measured (noisy) currents for each photodiode                                   | [num_diodes,]
        - current_noises: Current noise added to the measurement                                        | [num_diodes,]
            (Note that this is really just tracked for debugging purposes)
    """  
    C, Œ±, œµ = sat.diodes.calib_values, sat.diodes.azi_angles, sat.diodes.elev_angles 

    num_diodes =  size(sat.diodes.calib_values, 1)
    current_vals = zeros(num_diodes) # Currents being generated by each photodiode
    current_noises = zeros(num_diodes)
    current_meas = zeros(num_diodes)

    albedo_matrix, _ = albedo(pos, s·¥µ, alb.refl) 

    for i = 1:num_diodes 
        surface_normal = [(cos(œµ[i])*cos(Œ±[i])) (cos(œµ[i])*sin(Œ±[i])) sin(œµ[i])]   # Photodiode surface normal 

        diode_albedo = compute_diode_albedo(albedo_matrix, alb.cell_centers_ecef, surface_normal, pos)

        current = ((C[i] * surface_normal * ùê¨·¥Æ) .+ (C[i] * diode_albedo / CONSTANTS._E_am0))[1] # Calculate current, including noise and Earth's albedo 
        current_noise = rand(Normal(0.0, abs((œÉ_current_scale * current))))

        current_meas[i] = (current .+ current_noise) * ecl
        current_vals[i] = current * ecl 
        current_noises[i] = current_noise
    end

    current_meas[current_meas .< 0] .= 0
    current_vals[current_vals .< 0] .= 0 # Photodiodes don't generate negative current
    
    return current_vals, current_meas, current_noises
end 



####################
# HELPER FUNCTIONS #
####################

function generate_noise_matrix(œÉ, dt)
    """
        Generates a [3 x 3] noise rotation matrix given a standard deviation 
            First generates a noise vector and then converts that into a rotation matrix
            (Note that if the standard deviation provided is 0, the identity matrix is returned)
    """
    if œÉ != 0.0
        Œ∑_vec = rand(Normal(0.0, œÉ), 3)  # Generate a vector 
        skew = hat(Œ∑_vec)
        norm_Œ∑ = norm(Œ∑_vec)

        R = (I(3) + (skew/norm_Œ∑)*sin(norm_Œ∑*dt) + ((skew/norm_Œ∑)^2)*(1 - cos(norm_Œ∑*dt))); # Rodrigues for matrix exponential (?)
    else
        R = I(3) 
    end
    
    return R
end


#TODO remove this once EarthAlbedo is updated
# ALSO exists in ESTIMATOR, and Earth_albedo (?)... -> make a bit more general and stick with EarthAlbedo's
function compute_diode_albedo(albedo_matrix, cell_centers_ecef, surface_normal, sat_pos)
    """ 
        Estimates the effect of Earth's albedo on a specific photodiode (by using the surface normal of that diode)
            = cell_albedo * surface_normal^T * r_g, with r_g as a unit vector in the direction of the grid point on Earth

        Arguments:
        - albedo_matrix: Albedo values for each cell on the Earth's surface         | [num_lat x num_lon] 
        - surface_normal: Photodiode surface normal                                 | [3,]
        - sat_pos: Cartesian position of satellite                                  | [3,]

        Returns:
        - diode_albedo: Total effect of albedo on specified photodiode              | Scalar
    """    
    diode_albedo = 0.0
    r_g = zeros(Float64, 3)
    for r = 1:1:size(albedo_matrix, 1)
        for c = 1:1:size(albedo_matrix, 2)
            if albedo_matrix[r,c] != 0
                r_g .= view(cell_centers_ecef, r, c, :) .- sat_pos
                r_g .= r_g ./ norm(r_g)  # Make unit

                cell_albedo = (albedo_matrix[r,c] * dot(surface_normal, r_g))

                if cell_albedo > 0.0    # Can't be negative
                    diode_albedo += cell_albedo 
                end
            end
        end
    end
    
    return diode_albedo
end


function generate_mag_calib_matrix(sat::SATELLITE)
    """ Generates the calibration matrix that alters the measured magnetic field vector in body frame """
    a, b, c = sat.magnetometer.scale_factors
    œÅ, Œª, œï = sat.magnetometer.non_ortho_angles

    T = [a        0.0              0.0;
        b*sin(œÅ)  b*cos(œÅ)         0.0;
        c*sin(Œª)  c*sin(œï)*cos(Œª)  c*cos(œï)*cos(Œª)]

    return T
end


