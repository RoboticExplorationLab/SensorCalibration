####################################################################
#                      STANDARD MEKF                               #
####################################################################

@info "Not sure I am splitting up covariance into the three matrices correctly! (Shouldn't be diagonal...?)"
mutable struct MEKF_DATA 
    albedo::ALBEDO  #  Albedo Struct
    sat_state       #  Current state + calibration estimates [(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ]  |  [7 + 3i,]
    # covariance 
    inertial_vecs   #  Reference vectors in inertial frame 
    body_vecs       #  Reference vectors in body frame
    ang_vel         #  Angular velocity      
    current_meas    #  Photodiode current measurements       
    pos             #  Current satellite position estimate
    W               #  Process noise matrix   
    V               #  Measurement noise matrix s
    dt              #  Simulation time step           
    time            #  Current time (as an epoch) 
    num_diodes      #  Number of photodiodes (i)   
end

# DOES NOT update calibration parameters
function estimate_vals(sat::SATELLITE, data::MEKF_DATA)
    """
        Calls a single iteration of a multiplicative extended Kalman filter 
                and updates satellite attitude and bias estimates, BUT DOES NOT update calibration parameters

        Arguments:
            - sat:  Struct containing current estimate of satellite values      |  SATELLITE 
            - data: Struct containing necessary information to run MEKF         |  -----

        Returns:
            - sat:  Updated satellite struct containing new estimates           |  SATELLITE
            - data: Updated struct containing necessary MEKF information        |  -----
    """  
    data.time += data.dt
    x = data.sat_state[1:7]
    c, Œ±, œµ = sat.diodes.calib_values, sat.diodes.azi_angles, sat.diodes.elev_angles
    
    new_state, new_covariance = mekf(x, c, Œ±, œµ, sat.covariance, data.W, data.V, 
                                        data.inertial_vecs, data.body_vecs, data.ang_vel, 
                                        data.current_meas, data.num_diodes, data.pos, data.dt, 
                                        data.time, data.albedo)

    data.sat_state = new_state 

    sat.state = new_state[1:7] # Only tracking the non-calibration states
    sat.covariance = new_covariance
    return sat, data 
end

function new_mekf_data(data::DIODE_CALIB)
    """
        Generates a new MEKF_DATA struct containing necessary information to estimate attitude and gyro bias.
            Uses an existing DIODE_CALIB struct, meaning this is called when the diodes are calibrated while in sunlight

        Arguments:
            - data:  DIODE_CALIB struct containing necessary information to initialize the vanilla MEKF    | DIODE_CALIB

        Returns:
            - mekf:  MEKF_DATA struct       | MEKF_DATA
    """    
    
    mekf = MEKF_DATA(data.albedo, data.sat_state[1:7], # data.covariance[1:6, 1:6], 
                        data.inertial_vecs,  data.body_vecs, data.ang_vel,
                        data.current_meas, data.pos, data.W[1:6, 1:6], data.V, 
                        data.dt, data.time, data.num_diodes)

    # mekf = MEKF(data.albedo, data.sat_state[1:7], #.covariance, 
    #             data.inertial_vecs, data.ang_vel, data.body_vecs,
    #             data.current_meas, data.W, data.V, data.dt,
    #             data.time, data.num_diodes, data.pos)
    return mekf
end 

function new_mekf_data(alb::ALBEDO, sens::SENSORS, system, q, sat)
    """
        Generates a new MEKF_DATA struct containing necessary information to estimate attitude and gyro bias.
            This version is called when coming out of an eclipse, and must initialize all values 

        Arguments:
            - alb: ALBEDO struct containing refl and cell centers         |  ALBEDO
            - sens: SENSORS struct containing sensor measurements         |  SENSORS 
            - system: Set of system constants needed for Simulation       |  List
            - q: Current estimate of satellite attitude                   |  [4,] ([q‚Éó; q‚ÇÄ] -> Scalar last)
            - sat: Struct containing current satellite estimate           |  SATELLITE

        Returns:
            - mekf:  MEKF_DATA struct                                     | MEKF_DATA
    """  
    sat_state = zeros(7)
    data = MEKF_DATA(alb,        # ALBEDO 
                        sat_state,    # Satellite state ([(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ], NOT the same as state in simulation)
                        # 0.0,        # UPDATE with covariance  <---- does this need to be reset or passed on through eclipse?
                        0.0,          # Ref vectors in inertial frame (r·¥µ)
                        0.0,          # Ref vectors in body frame (r·¥Æ)
                        sens.gyro,    # Angular velocity 
                        0.0,          # Photodiode current measurements 
                        sens.gps,     # Position
                        0.0,          # Update with W 
                        0.0,          # Update with V 
                        system._dt,   # Time step
                        system._epc,  # Initial time
                        system._num_diodes)   # Number of photodiodes on the satellite 

    Œ≤‚ÇÄ = sat.state[5:7] # Continue with last estimate of bias
    x‚ÇÄ = [q; Œ≤‚ÇÄ] 

    œÉ_q = (10*pi/180) 
    œÉ_Œ≤ = (10*pi/180)

    if isnan(sat.covariance[1,1]) # Setting up covariance from scratch
        p = [œÉ_q * ones(3); œÉ_Œ≤ * ones(3); zeros(18)].^2
        P‚ÇÄ = diagm(p)
        sat.covariance = P‚ÇÄ
    else    # Setting up covariance after an eclipse
        p = [œÉ_q * ones(3); œÉ_Œ≤ * ones(3)].^2   # Reset Attitude and Bias covariance
        P‚ÇÄ = diagm(p)
        sat.covariance[1:6, 1:6] = P‚ÇÄ
    end

    ##### VERIFY THIS SECTION ##########
    estimator_params = (angle_random_walk      = 0.06,   # in deg/sqrt(hour)   
                        gyro_bias_instability  = 0.8,    # Bias instability in deg/hour
                        velocity_random_walk   = 0.014,  # in m/sec/sqrt(hour)
                        accel_bias_instability = 6)      # in microG

    Q_gyro = ((estimator_params[:gyro_bias_instability] * (pi/180)    )^2)/(3600^3)  # Units are now rad^2/seconds^3...? => (rad/sec)^
    œÉ_orient = sqrt(Q_gyro);

    Q_bias = ((estimator_params[:angle_random_walk]*(pi/180))^2)/(3600)   # This is super small
    œÉ_bias = sqrt(Q_bias)

    œÉ_sunVec = deg2rad(5.0); œÉ_magVec = deg2rad(5.0); œÉ_curr = 0.008; #3, 3, 0.005
    #######################################

    W = Diagonal([œÉ_orient * ones(3); œÉ_bias * ones(3)])

    V = Diagonal([œÉ_magVec * ones(3); œÉ_curr * ones(data.num_diodes)])
    
    data.sat_state = x‚ÇÄ
    sat.covariance[1:6, 1:6] = P‚ÇÄ   #### Should this be sat.covariance[1:6, 1:6] = P‚ÇÄ?
    data.W = W[1:6, 1:6] 
    data.V = V
            
    return data
end

function mekf(x, c, Œ±, œµ, P‚Çê, W, V, r·¥µ, r·¥Æ, w, y, _num_diodes, pos, dt, time, alb::ALBEDO)
    """
        Runs a single step of a multiplicative extended Kalman filter 
            (DOES NOT update the calibration parameters)

        Arguments:
            - x: Current state + calibration estimates [(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ]  |  [7 + 3i,]
            - c: Best estimate of diode calibration values                |  [i,]
            - Œ±: Best estimate of diode azimuth angles                    |  [i,]
            - œµ: Best estimate of diode elevation angles                  |  [i,]
            - P: Current covariance matrix for the state                  |  [6 + 3i  x  6 + 3i]
            - W: Process noise matrix                                     |  [6 + 3i  x  6 + 3i]
            - V: Measurement noise matrix                                 |  [3 + i,]
            - r·¥µ: Reference vectors in inertial frame                     |  [2 x 3]
            - r·¥Æ: Reference vectors in body frame                         |  [2 x 3]
            - w: Angular velocity                                         |  [3,]
            - y: Current measurements                                     |  [i,]
            - _num_diodes: Number of photodiodes (i)                      |  Int 
            - pos: Current satellite position estimate                    |  [3,]
            - dt: Simulation time step                                    |  Scalar 
            - time: Current time (as an epoch)                            |  Epoch 
            - alb: ALBEDO struct containing refl and cell centers         |  ALBEDO

        Returns:
            - x_next: Estimate of next state                              |  [7 + 3i,]
            - P_next: Covariance of next state                            |  [6 +3i  x  6 + 3i]
    """      

    P = P‚Çê[1:6, 1:6]

    s·¥µ = @view r·¥µ[1,:];  ùê¨·¥µ = s·¥µ / norm(s·¥µ)
    B·¥µ = @view r·¥µ[2,:];  ùêÅ·¥µ = B·¥µ / norm(B·¥µ)
    ùê¨·¥Æ = @view r·¥Æ[1,:];  ùê¨·¥Æ = ùê¨·¥Æ / norm(ùê¨·¥Æ)                    
    B·¥Æ = @view r·¥Æ[2,:];  ùêÅ·¥Æ = B·¥Æ / norm(B·¥Æ)

    # Predict x, P
    x_p, A‚Çê = prediction(x, w, dt, _num_diodes, false); # State prediction ( WITH EXTRA ARGUMENT TO DISTINGUISH)
    A = A‚Çê[1:6, 1:6]

    P_p = A*P*A' + W; # Covariance prediction 

    # Measurement
    yp_mag, C_mag‚Çê = mag_measurement(x_p, c, Œ±, œµ, ùêÅ·¥µ, _num_diodes)
    z_mag = ùêÅ·¥Æ - yp_mag 
    yp_cur, C_cur‚Çê = current_measurement(x_p, c, Œ±, œµ, ùê¨·¥µ, _num_diodes, pos, time, alb) 
    z_cur = y - yp_cur 

    C‚Çê = [C_mag‚Çê; C_cur‚Çê]
    C = C‚Çê[:, 1:6]
    z = [z_mag[:]; z_cur[:]]

    # Innovation   
    Vk = Diagonal(V)
    S = C*P_p*C' + Vk;  
    
    # Kalman Gain
    L = P_p * C' * S^(-1); 

    # Update
    dx = L*z;    

    dœï = dx[1:3]; 
    drest = dx[4:end]

    Œ∏ = (norm(dœï));
    rTemp = dœï / Œ∏; 
    
    dq = [rTemp*sin(Œ∏/2); cos(Œ∏/2)];

    x_next = deepcopy(x)
    x_next[1:4] = qmult(x_p[1:4], dq);
    x_next[5:end] = x_p[5:7] + drest;

    

    W‚Çê = [W zeros(6, 18);
            zeros(18, 24) ]

    K‚Çê = [L; zeros(18, 9)]

    P‚Çê[1:6, 1:6] = P_p

    I‚Çö = I(size(P‚Çê,1))
    P‚Å∫ = (I‚Çö - K‚Çê*C‚Çê) * P‚Çê * (I‚Çö - K‚Çê*C‚Çê) + K‚Çê*Vk*K‚Çê';
    
    # P_next = (I(size(P,1)) - L*C) * P_p * (I(size(P,1)) - L*C)' + L*Vk*L';  

    return x_next, P‚Å∫
end

function mag_measurement(x, c, Œ±, œµ, ùêÅ·¥µ, i)
    """
        Generates what we would expect our measured magnetic field vector would be in the body frame 
            given our current estimated attitude

        Arguments:
            - x:  Current state of the satellite [(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ]             | [7 + 3i,] 
            - ùêÅ·¥µ: Unit mag field vector in the newtonian (inertial) frame      |  [3,]

        Returns:
            - y: Unit mag field vector estimate corresponding to state         |  [3,]
            - H: Jacobian of y with respect to x                               |  [3 x 6 + 3i]
                        dy/dx = [dy/dœï; dy/dŒ≤; ...]                             
    """

    x = x[:]
    q = x[1:4]
    Œ≤ = x[5:7]

    ·¥ÆQ·¥µ = dcm_from_q(q)'; # DCM from quaternion (flipped)    
    ùêÅ·¥Æ = ·¥ÆQ·¥µ*ùêÅ·¥µ;     # this is what the measurement would be given our estimated attitude

    BÃå·¥Æ = hat(ùêÅ·¥Æ);    # Skew-symmetric matrix

    ‚àÇŒ∏ = BÃå·¥Æ 
    ‚àÇŒ≤ = zeros(3, 3)
    ‚àÇC = zeros(3, i)
    ‚àÇŒ± = zeros(3, i)
    ‚àÇœµ = zeros(3, i)    

    H = [‚àÇŒ∏ ‚àÇŒ≤ ‚àÇC ‚àÇŒ± ‚àÇœµ]; # [3 x 6 + 3i]
    y = ùêÅ·¥Æ[:]             # [3 x 1]

    return y, H
end

function current_measurement(x, c, Œ±, œµ, ùê¨·¥µ, i, pos, time, alb::ALBEDO)
    """
        Generates what we would expect our measured current values to be given our estimate of state

        Arguments:
            - x:  Current state of the satellite [(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ]             | [7 + 3i,] 
            - c: Best estimate of diode calibration values                     |  [i,]
            - Œ±: Best estimate of diode azimuth angles                         |  [i,]
            - œµ: Best estimate of diode elevation angles                       |  [i,]    
            - ùê¨·¥µ: Unit sun vector in the newtonian (inertial) frame            |  [3,]
            - i:  Number of photodiodes                                        |  Int
            - pos: Current satellite position estimate                         |  [3,]
            - time: Current time (as an epoch)                                 |  Epoch 
            - alb: ALBEDO struct containing refl and cell centers              |  ALBEDO

        Returns:
            - y: Current measurements corresponding to ùê¨·¥µ & q (non-negative)   |  [i,]
            - H: Jacobian of y with respect to x                               |  [i x 6 + 3i]
                        dy/dx = [dy/dœï; dy/dŒ≤; ...]                             
    """
    x = x[:]
    q = x[1:4]
    Œ≤ = x[5:7]

    ·¥ÆQ·¥µ = dcm_from_q(q)'; # DCM from quaternion (transposed to get I -> B)
    s·¥Æ = ·¥ÆQ·¥µ * ùê¨·¥µ

    sÃå·¥Æ= hat(s·¥Æ);  # Skew-symmetric form
    n = [cos.(œµ).*cos.(Œ±) cos.(œµ).*sin.(Œ±) sin.(œµ)];  # [i x 3]
    ndŒ± = [(-cos.(œµ).*sin.(Œ±)) (cos.(œµ).*cos.(Œ±)) zeros(size(Œ±))];
    ndœµ = [(-sin.(œµ).*cos.(Œ±)) (-1*(sin.(œµ).*sin.(Œ±))) cos.(œµ)]; # (With negative middle term, differing from the paper)
    
    ‚àÇŒ∏ = (c .* n) * sÃå·¥Æ;     # [i x 3]
    ‚àÇŒ≤ = zeros(i, 3);       # [i x 3]  
    ‚àÇC = n * s·¥Æ;            # [i,]
    ‚àÇŒ± = c .* (ndŒ± * s·¥Æ);   # [i,]
    ‚àÇœµ = c .* (ndœµ * s·¥Æ);   # [i,]  

    H = [‚àÇŒ∏ ‚àÇŒ≤ Diagonal(‚àÇC) Diagonal(‚àÇŒ±) Diagonal(‚àÇœµ)] # [i x 6 + 3i]
    I_meas = c .* (n * s·¥Æ)  # Measured current, ALBEDO added in later


    # ADD IN ALBEDO
    s·¥µ_unscaled = sun_position(time) - pos;
    # ecl = eclipse_conical(-pos, s·¥µ_unscaled) ####### NEED TO FIX TO +pos when updated
    # ecl = (ecl > 0.98) ? 1.0 : 0.0

    albedo_matrix, ignore = albedo(pos, s·¥µ_unscaled, alb.refl)
    for j = 1:i
        surface_normal = [cos(œµ[j])*cos(Œ±[j]) cos(œµ[j])*sin(Œ±[j]) sin(œµ[j])]     # Photodiode surface normal 
        diode_albedo = compute_diode_albedo(albedo_matrix, alb.cell_centers_ecef, surface_normal, pos)
        diode_albedo = c[j] * diode_albedo / _E_am0;
        I_meas[j] = I_meas[j] + diode_albedo
    end
    
    # Account for eclipses
    # I_meas *= ecl
    I_meas[I_meas .< 0] .= 0  # Photodiodes don't generate negative current
    H[I_meas .‚â§ 0, :] .= 0    # ^ To match the above
    y = I_meas[:]             # [i x 1]        
    return y, H
end

# Pass in A by reference?
function prediction(x, w, dt, i, flag)
    """
        Predicts the next state and covariance using current state, angular velocity, and time step
            (essentially assumes a small rotation in attitude and that the other states are constant)

        Arguments:
            - x:  Current state of the satellite [(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ]              | [7 + 3i,] 
            - w:  Current angular velocity estimate of the satellite            | [3,]
            - dt: Time step of the Simulation                                         |  Int

        Returns:
            - xn: Predicted next state  [(q‚Éó, q‚ÇÄ) Œ≤ C Œ± œµ]                       | [7 + 3i,] 
            - H:  Jacobian of state x with respect to itself                    |  [i x 6 + 3i]
                    (Note that the quaternions have been replaced with 3 param)
                        dx/dx = [dœï/dœï; dœï/dŒ≤; ...]                             
    """
    q = x[1:4]; # Quaternion portion
    Œ≤ = x[5:7]; # Bias portion

    Œ≥ = w - Œ≤;     # Adjusted angular velocity (w - biases)
    nŒ≥ = norm(Œ≥)

    Œ∏ = (nŒ≥*dt);  
    r = Œ≥/nŒ≥;  # Make unit

    qp = qmult(q, [r*sin(Œ∏/2); cos(Œ∏/2)]); 
    
    skew = -hat(Œ≥)

    R = (I(3) + (skew/nŒ≥)*sin(nŒ≥*dt) + ((skew/nŒ≥)^2)*(1 - cos(nŒ≥*dt)));     # Rodrigues (for matrix exponential?)

    A = [R -dt*I(3); zeros(3,3) I(3)]; # Jacobian of f(x)

    A = [A          zeros(6, 3 * i); 
         zeros(3 * i, 6)     I(3*i)];

    xn = [qp; Œ≤]  # x at next step

    return xn, A
end
