# [src/MissionSim/Simulator/measurements.jl]

"""
    Contains the code used in the Simulator to generate 
  the measurements for each of the sensors.

  To Do:
    - diode_meas is reaaaaal slow (2.8ms / 19 / 413 KiB)  -> earth_albedo takes up 2.241 ms of that, but if we downsample albedo before...
    - IGRF in mag_meas is also slow ‚àº Œºs
    - Update all the comments
"""

# update comments. These noise parameters are mostly random
function generate_measurements(sat::SATELLITE, alb::ALBEDO, x::STATE, t::Epoch, dt::T; 
             E_am‚ÇÄ = 1366.9, œÉŒ≤ = deg2rad(3.0), Œº_gyro_scale = 0.05, œÉ_gyro_scale = 0.005, 
             Œºr = 5e4, œÉr = 5e3, œÉ_sun = deg2rad(3.0), œÉ_current_scale = 0.05) where {T}
  
  """
   (All the noise)
    E_am‚ÇÄ =  1366.9 # Irradiance of sunlight (TSI - visible & infrared), W/m^2 
  """
  
  ·¥ÆQ·¥µ = quat2rot(x.q)  # Compute once and pass in 

  # Call each sensor
  B·¥µ, B·¥Æ, BÃÉ·¥Æ  = mag_measurement(sat, x, ·¥ÆQ·¥µ, t, dt; œÉ = œÉŒ≤) 
  w, wÃÉ, Œ∑w    = gyro_measurement(x; Œº_scale = Œº_gyro_scale, œÉ_scale = œÉ_gyro_scale) 
  r, rÃÉ, Œ∑r    = pos_measurement(x; Œº = Œºr, œÉ = œÉr) 
  s·¥µ, s·¥Æ, ecl = sun_measurement(x, ·¥ÆQ·¥µ, t, dt; œÉ = œÉ_sun)
  I, IÃÉ, Œ∑I    = diode_measurement(sat, alb, x, ecl, s·¥µ, s·¥Æ; œÉ_scale = œÉ_current_scale, E_am‚ÇÄ = E_am‚ÇÄ)

  # Store the outputs 
  sensors = SENSORS(BÃÉ·¥Æ, IÃÉ, wÃÉ, rÃÉ)
  truth   = GROUND_TRUTH(t, B·¥µ, s·¥µ, s·¥Æ, B·¥Æ, I)  # w, r are stored in state
  noise = NOISE(Œ∑I, Œ∑w, Œ∑r)

  return truth, sensors, ecl, noise
end

# test, alloc, type;    Comment   (Speed up IGRF13? Takes ~Œºs)
function mag_measurement(sat::SATELLITE, x::STATE, ·¥ÆQ·¥µ::SMatrix{3, 3, T, 9}, t::Epoch, dt::T; œÉ = deg2rad(3.0)) where {T}
  """
    Generates the true magnetic field vector in inertial and body frames, 
        as well as the noisy sensor measurement.

    Arguments:
    - pos: Current (x, y, z) position of the satellite in ECEF                                          | [3,] (SVector)
    - t: Current time, as an epoch                                                                      | Epoch
    - sat: TRUE satellite data, which is used to generate sensor measurements                           | SATELLITE
                J (inertia matrix, [3 x 3])          //  magnetometer (calibration values, [3,]),
                diodes (photodiode parameters [3,])  //  state (attitude and bias, [7,])
    - q: Quaternion from inertial frame to body frame                                                   | [4,] (SVector)
    - dt: Time step                                                                                     | Scalar
    
    Returns:
    - B·¥µ: Magnetic field vector in inertial frame (noiseless)                                           | [3,] (SVector)
    - B·¥Æ: Magnetic field vector in body frame (noiseless)                                               | [3,] (SVector)
    - BÃÉ·¥Æ: Measured magnetic field vector in body frame (noisy, biased, and scaled)                      | [3,] (SVector)
  """
  B·¥µ = SVector{3, Float64}(IGRF13(x.r, t))   # Mag vector in inertial frame 
  B·¥Æ = ·¥ÆQ·¥µ * B·¥µ 

  # Add in noise
  Œ∑_mag = rotation_noise(œÉ, dt)
  mag_calibration_matrix = get_mag_calibration_matrix(sat)
  BÃÉ·¥Æ = (mag_calibration_matrix * Œ∑_mag * B·¥Æ) + sat.magnetometer.bias 

  return B·¥µ, B·¥Æ, BÃÉ·¥Æ
end

# test, alloc, type;  Verify scale values, update comments; Noise scales with value (?)
function gyro_measurement(x::STATE; Œº_scale = 0.05, œÉ_scale = 0.005) 
  """ 
    Generates the gyroscope measurement by adding noise into the true values.
    
    Arguments: 
    - state: Environmental state (pos, vel, att, ang vel, bias)                          | [16,]
    
    Returns:
    - w: Angular velocity                                                            | [3,]
        (NOTE that this is just returned for convenience, as it is already in state)
    - wÃÉ: Measured angular velocity (including noise and bias)                        | [3,]
    - Œ∑w: Gyroscope noise                                                            | [3,]
        (Note that this is really just tracked for debugging purposes)
  """
  Œ∑œâ = rand(Normal(Œº_scale * norm(x.œâ), œÉ_scale * norm(x.œâ)), 3)  # Noise scales with actual value

  œâÃÉ  = x.œâ .+ x.Œ≤ .+ Œ∑œâ

  return x.œâ, œâÃÉ , Œ∑œâ
end

# test, alloc, type;   Verify noise values, comments; (Note that r is tracked in state, but this allows for some adjustments)
function pos_measurement(x::STATE; Œº = 5e4, œÉ = 5e3)
  """ 
    Generates the GPS measurement by adding noise into the true values.

    Arguments: 
    - state: Environmental state (pos, vel, att, ang vel, bias)                          | [16,]
    
    Returns:
    - r: Global position                                                             | [3,]
        (NOTE that this is just returned for convenience, as it is already in state)
    - rÃÉ: Measured position (including noise)                                         | [3,]
    - Œ∑r: Position noise                                                             | [3,]
        (Note that this is really just tracked for debugging purposes)
  """

  Œ∑r = SVector{3, Float64}(rand(Normal(Œº, œÉ), 3))
  rÃÉ = x.r + Œ∑r

  return x.r, rÃÉ, Œ∑r
end

# test, allocs, type;  update comments NOTE i am not scaling s·¥µ by ecl anymore; Verify noise values, update comments; dt may not be needed
function sun_measurement(x::STATE, ·¥ÆQ·¥µ::SMatrix{3, 3, T, 9}, t::Epoch, dt::T; œÉ = deg2rad(3.0))::Tuple{SVector{3, T}, SVector{3, T}, T} where {T} 
  """
    Generates the sun vector in the body and inertial frames, as well as whether or not the 
        sun is being eclipsed by the Earth (from the satellites perspective).
        
    Arguments:
    - pos: [x, y, z] position of the satellite in ECEF frame                                     | [3,]
    - t: Current time, as an epoch                                                               | Epoch
    - ·¥ÆR·¥µ: Rotation matrix from inertial frame to body frame                                     | [3 √ó 3]
    - dt: Time step                                                                              | Scalar
                                  
    Returns:
    - s·¥µ: Satellite-sun vector in the inertial frame                                             | [3,]
    - ùê¨·¥Æ: Unit satellite-sun vector in the body frame                                            | [3,]
    - ecl: Eclipse factor                                                                        | Scalar
    
  """
  s·¥µ‚Çë = (sun_position(t)) 
  s·¥µ = s·¥µ‚Çë - x.r 

  ecl = eclipse_cylindrical(vcat([x.r;]...), s·¥µ‚Çë)

  # Avoid divide-by-zero problem 
  if ecl < 0.001 
    return s·¥µ, SVector(0.0, 0.0, 0.0), 0.0

  else

    Œ∑_sun = rotation_noise(œÉ, dt)   
    ùê¨·¥µ = s·¥µ / norm(s·¥µ)
    ùê¨·¥Æ = (Œ∑_sun * (·¥ÆQ·¥µ * ùê¨·¥µ))

    return s·¥µ, ùê¨·¥Æ, ecl
  end
end

# VERY slow (‚âà 3ms)
# Verify noise values, comments; noise is scaled by current  (Clips to zero ùëéùëìùë°ùëíùëü adding noise, so should do the same on est)
function diode_measurement( sat::SATELLITE{N, T}, alb::ALBEDO, x::STATE{S‚Çì, T}, ecl::Real, s·¥µ::SVector{3, T}, s·¥Æ::SVector{3, T}; 
                            œÉ_scale = 0.05, E_am‚ÇÄ = 1366.9)::Tuple{SVector{N, T}, SVector{N, T}, SVector{N, T}} where {N, S‚Çì, T}
  """ 
    Generates photodiode currents and current measurements. 
        (NOTE that current generated cannot be negative so these are clipped at zero)

    Arguments:
    - sat: TRUE satellite data, which is used to generate sensor measurements                       | SATELLITE
                J (inertia matrix, [3 x 3])          //  magnetometer (calibration values, [3,]),
                diodes (photodiode parameters [3,])  //  state (attitude and bias, [7,])
    - pos: Current (x, y, z) position of the satellite in ECEF                                      | [3,]
    - alb: Albedo struct containing REFL data and cell centers                                      | ALBEDO
                REFL    //   cell_centers_ecef
    - s·¥µ: Satellite-Sun vector in the inertial frame (noiseless)                                      | [3,]
    - s·¥Æ: Unit satellite-sun vector in the body frame (noiseless)                                     | [3,]
    - CONSTANTS: Various constants needed (Earth radius, Œº , E_am‚ÇÄ)                                 | [3,]       
    
    Returns:
    - I: Currents generated by each photodiode                                           | [N,]
    - IÃÉ: Measured (noisy) currents for each photodiode                                   | [N,]
    - Œ∑I: Current noise added to the measurement                                        | [N,]
        (Note that this is really just tracked for debugging purposes)
  """  

  if (ecl == 0)   # I = 0, IÃÉ is just noise
    Œ∑ = SVector{N, T}(rand(Normal(0.0, œÉ_scale * 0.001), N))
    return SVector{N, T}(zeros(N)), Œ∑, Œ∑
  else 

    C, Œ±, œµ = sat.diodes.calib_values, sat.diodes.azi_angles, sat.diodes.elev_angles 

    I  = zeros(T, N)   # Currents being generated by each photodiode
    Œ∑I = zeros(T, N)
    IÃÉ  = zeros(T, N)

    albedo_matrix = earth_albedo(x.r, s·¥µ, alb.refl.data) 

    for i = 1:N 
      surface_normal = SVector{3, T}((cos(œµ[i])*cos(Œ±[i])), (cos(œµ[i])*sin(Œ±[i])), sin(œµ[i]))  # Photodiode surface normal 

      diode_albedo = compute_diode_albedo(albedo_matrix, alb.cell_centers_ecef, surface_normal, x.r)  # N * (0.1 ms, 2 alloc )

      current = C[i] * dot(surface_normal, s·¥Æ) + (C[i] / E_am‚ÇÄ) * diode_albedo  # Calculate current, including noise and Earth's albedo 
      current *= ecl
      Œ∑ = rand(Normal(0.0, abs(œÉ_scale * current)))

      # Photodiodes don't generate negative current
      I[i] = (current < 0) ? 0.0 : current 
      IÃÉ[i] = (current + Œ∑ < 0.0) ? 0.0 : (current + Œ∑) 
      Œ∑I[i] = Œ∑ 
    end

    return SVector{N, T}(I), SVector{N, T}(IÃÉ), SVector{N, T}(Œ∑I)
  end
end 




####################
# HELPER FUNCTIONS #
####################
# Could probably go in a shared file

# Tests (?), allocs, type;    Comments; Do I need dt? -> Not for sensor noise 
function rotation_noise(œÉ::T, dt::T)::SMatrix{3, 3, T, 9} where {T}
  """
      Generates a [3 √ó 3] noise rotation matrix by generating a random axis of rotation and the 
    angle by which to rotate about the axis. This axis-angle representation is then converted
    to R ‚àà SO(3) using Rodrigues' Rotation formula (similar to matrix exponential exp(œâŒ∏))
    (Note that if the standard deviation provided is 0, the identity matrix is returned)
  
    œÉ is in radians
  """
  if œÉ == 0
    return SMatrix{3, 3, T, 9}(I(3))
  else 
    v   = rand(Normal(0, œÉ), 3)
    mag = norm(v)
    vÃÇ   = hat(v / mag) 

    R = I(3) + (vÃÇ) * sin(mag * dt) + (vÃÇ^2) * (1 - cos(mag * dt))  # Equivalent to exp(vÃÇ)

    return SMatrix{3, 3, T, 9}(R)
  end
end

# Tests, type, allocs;   Comments  (look at satDyn.jl comments)
function get_mag_calibration_matrix(sat::SATELLITE)
  """ Generates the calibration matrix that alters the measured magnetic field vector in body frame """
  a, b, c = sat.magnetometer.scale_factors 
  œÅ, Œª, œï = sat.magnetometer.non_ortho_angles 

  T = zeros(Float64, 3, 3)
  T[1, 1] = a 
  T[2, 1] = b * sin(œÅ) 
  T[2, 2] = b * cos(œÅ)
  T[3, 1] = c * sin(Œª) 
  T[3, 2] = c * cos(Œª) * sin(œï)
  T[3, 3] = c * cos(Œª) * cos(œï)

  # T = [a         0.0              0.0;
  #      b*sin(œÅ)  b*cos(œÅ)         0.0;
  #      c*sin(Œª)  c*sin(œï)*cos(Œª)  c*cos(œï)*cos(Œª)]

  return T
end

# Tests, type, allocs;   Comments
function compute_diode_albedo(data::Matrix{T}, cell_centers_ecef::Array{T, 3}, surface_normal::SVector{3, T}, sat_pos::SVector{3, T}; lat_step::Int = 1, lon_step::Int = 1) where {T}
  """ 
      Estimates the effect of Earth's albedo on a specific photodiode (by using the surface normal of that diode)
          = cell_albedo * surface_normal^T * r_g, with r_g as a unit vector in the direction of the grid point on Earth
          (NOTE this comes from the Springmann paper referenced in the estimator section about photodiode calibration)

      Arguments:
      - data: Albedo values for each cell on the Earth's surface  (calculated with EarthAlbedo)   | [num_lat x num_lon] 
      - surface_normal: Photodiode surface normal                                 | [3,]
      - sat_pos: Cartesian position of satellite                                  | [3,]

      Returns:
      - diode_albedo: Total effect of albedo on specified photodiode              | Scalar
  """    
  Nlat, Nlon = size(data)

  diode_albedo = 0.0
  r_g = zeros(T, 3)

  for r = 1:lat_step:Nlat
      for c = 1:lon_step:Nlon

          if data[r,c] != 0
              r_g .= view(cell_centers_ecef, r, c, :) .- sat_pos
              r_g .= r_g ./ norm(r_g)  # Make unit

              cell_albedo = (data[r,c] * dot(surface_normal, r_g))

              if cell_albedo > 0.0    # Can't be negative
                  diode_albedo += cell_albedo 
              end
          end

      end
  end
  
  return diode_albedo
end